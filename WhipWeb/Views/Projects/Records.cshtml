@model WhipStat.Models.ProjectViewModels.RecordsViewModel
<h2>Voting Records</h2>

<div class="row">
    <div class="col-md-8">
        <h3>Partisan Distribution of WA Legislature:</h3>
        <div id="Chart">
            <div class="progress center-block" style="width: 20%; margin-top: 200px">
                <div class="progress-bar progress-bar-striped active" role="progressbar" style="width: 100%">Loading...</div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <section>
            <h3>Filters:</h3>
            <form asp-controller="Projects" asp-action="Records" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
                <ul class="list-group">
                    <li class="list-group-item">
                        <h4 class="list-group-item-heading">Policy Area:</h4>
                        <select asp-for="Area" asp-items="Model.Areas"></select>
                    </li>
                    <li class="list-group-item">
                        <h4 class="list-group-item-heading">Date Range:</h4>
                        <select asp-for="From" asp-items="Model.OddYears"></select> to
                        <select asp-for="To" asp-items="Model.EvenYears"></select>
                    </li>
                    <li class="list-group-item">
                        <h4 class="list-group-item-heading">Chamber:</h4>
                        <select asp-for="Chamber" asp-items="Model.Chambers"></select>
                    </li>
                </ul>
            </form>
        </section>
        <section>
            <h3>Methodology:</h3>
            <p>
                The partisanship score for each floor vote is calculated as the percentage of Republican supporters minus the percentage of Democrat supporters, giving each a range from 100 (exclusively Republican) to -100 (exclusively Democrat) with unanimous votes scoring zero.
            </p>
            <p>
                The member's aggregate score is just the average of all the scores of floor votes they supported, minus the scores from those they opposed.
            </p>
        </section>
        <section>
            <h3>Related Links</h3>
            <p>
                More information is available at the sites below:
            </p>
            <ul>
                <li><a href="http://wslwebservices.leg.wa.gov/">WA Legislative Web Services</a></li>
                <li><a href="http://app.leg.wa.gov/DistrictFinder/">District Finder</a></li>
                <li><a href="https://www.sos.wa.gov/elections/redistricting/maps.aspx">District Maps</a></li>
            </ul>
        </section>
    </div>
</div>


@section Scripts {
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        var loading = true;

        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        // Callback that creates and populates a data table,
        // instantiates the scatter chart, passes in the data and
        // draws it.
        function drawChart() {

            $.get("/Projects/GetDataTable/?" + $('form').serialize(), function (jsonData) {
                // Create our data table out of JSON data loaded from server.
                var data = new google.visualization.DataTable(jsonData);

                // Get filter settings.
                var area = $("#Area option:selected").text();
                var biennium = $("#Year option:selected").text();
                var chamber = $("#Chamber option:selected").text();
                var options = {
                    title: area + " (" + biennium + "), " + chamber,
                    height: 640,
                    chartArea: { width: '80%', height: '80%' },
                    legend: { position: 'bottom' },
                    colors: ['#4285F4', '#DB4437'],
                    dataOpacity: 0.8,
                    pointSize: 10,
                    animation: { duration: 1000, easing: 'out', startup: true },
                    tooltip: { isHtml: true }
                }

                // Instantiate and draw our chart, passing in some options.
                var chart = new google.visualization.ScatterChart(document.getElementById('Chart'));
                google.visualization.events.addListener(chart, 'animationfinish', drawMedianValues);
                chart.draw(data, options);
                loading = false;

                function drawMedianValues() {
                    var cli = chart.getChartLayoutInterface();
                    var area = cli.getChartAreaBoundingBox();
                    var svg = chart.getContainer().getElementsByTagName('svg')[0];
                    for (i = 0; i < 2; i++) {
                        var p = data.getColumnProperties(i * 2 + 1);
                        var x = cli.getXLocation(p.median)
                        svg.appendChild(createLine(x, area.top + area.height, x, area.top, options.colors[i], 0.3, 5));
                    }
                }

                function createLine(x1, y1, x2, y2, color, opacity, width) {
                    var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                    line.setAttribute('x1', x1);
                    line.setAttribute('y1', y1);
                    line.setAttribute('x2', x2);
                    line.setAttribute('y2', y2);
                    line.setAttribute('stroke', color);
                    line.setAttribute('stroke-opacity', opacity);
                    line.setAttribute('stroke-width', width);
                    return line;
                }
            });
        }

    </script>
    <script>
        $("select").change(function () {
            if (!loading)
                drawChart();
        }).change();
    </script>
}
